openapi: 3.0.3
info:
  title: DropNote API
  version: 1.0.0
servers:
  - url: https://api.dropnote.com/v1
paths:
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '201': { description: User registered }
        '400': { description: Bad request }

  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200': 
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }

  /notes/drop:
    post:
      summary: Drop a new anonymous note
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string, maxLength: 500 }
      responses:
        '201': { description: Note created }
        '400': { description: Invalid request }

  /notes/fetch:
    get:
      summary: Fetch todayâ€™s received note
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Returns a note
          content:
            application/json:
              schema:
                type: object
                properties:
                  noteId: { type: string }
                  content: { type: string }

  /notes/reply/{noteId}:
    post:
      summary: Reply to a note
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: noteId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reply: { type: string, maxLength: 500 }
      responses:
        '201': { description: Reply created }
        '400': { description: Invalid request }
        '404': { description: Note not found }

  /notes/delete/{noteId}:
    delete:
      summary: GDPR-style deletion of note & reply
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: noteId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Note deleted }
        '404': { description: Not found }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
